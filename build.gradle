/*
 * Copyright 2016 Yusuke Ikeda
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    javaVersion = JavaVersion.VERSION_1_8
    springBootVersion = '1.3.5.RELEASE'
    // NOTE: Be tailored to the version that spring boot gradle plugin provides below.
    flywayVersion = '3.2.1'
    jooqVersion = '3.7.3'
    h2Version = '1.4.191'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
    classpath "org.jooq:jooq-codegen:${jooqVersion}"
    classpath "com.h2database:h2:${h2Version}"
  }
}

// TODO will be changes to plugins block notation below.
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'

description = 'Root project of daguerreo.'
targetCompatibility = sourceCompatibility = javaVersion
tasks.withType(AbstractCompile)*.options*.encoding = 'UTF-8'

sourceSets {
  generated {
    compileClasspath += configurations.compile
  }
  // TODO runtimeClasspath is also necessary?
  main.compileClasspath += generated.output
  test.compileClasspath += generated.output
  test.runtimeClasspath += generated.output
}

repositories {
  mavenCentral()
}

dependencies {
  compile 'org.springframework.boot:spring-boot-devtools'
  compile 'org.springframework.boot:spring-boot-starter-jooq'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'org.springframework.data:spring-data-commons'
  compile 'com.google.guava:guava:19.0'
  compileOnly 'org.projectlombok:lombok:1.16.6'
  runtime 'com.h2database:h2'
  runtime 'org.flywaydb:flyway-core'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
  testCompile 'org.assertj:assertj-core:3.4.1'
  testCompile 'org.assertj:assertj-db:1.1.1'
  testCompile 'com.ninja-squad:DbSetup:2.1.0'
}

jar {
  baseName = 'daguerreo'
  version = '0.0.1-SNAPSHOT'
}

findbugs {
  sourceSets = [sourceSets.main]
}

checkstyle {
  toolVersion = '7.0'
  sourceSets = [sourceSets.main]
}

idea {
  project {
    // See: https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaProject.html
    jdkName = javaVersion
    languageLevel = javaVersion
    vcs = 'Git'
  }
  module {
    // See: https://docs.gradle.org/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html
    generatedSourceDirs += sourceSets.generated.java.srcDirs
    downloadJavadoc = true
    downloadSources = true
  }
}

eclipse {
  classpath {
    containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
    containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    downloadJavadoc = true
    downloadSources = true
  }
}

flyway {
  url = 'jdbc:h2:file:/tmp/daguerreo;DATABASE_TO_UPPER=false'
  user = 'sa'
}

def targetPackageName = 'org.yukung.daguerreo.infrastructure'
task jooqGenerate(dependsOn: flywayMigrate) {
  description = 'Using the source code generation function of jOOQ, it will generate dao, entity, and more from the DB schema.'
  group = 'jooq'
  outputs.upToDateWhen { sourceSets.generated.java.files.size() > 0 && flywayMigrate.state.upToDate }
  doLast {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)
    // Workaround to avoid the problem of namespace are duplicated for the property of Gradle.
    // See: http://stackoverflow.com/questions/7437355/how-to-avoid-outer-scope-values-messing-with-using-the-markupbuilder
    xml.configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.7.0.xsd') {
      jdbc() {
        driver 'org.h2.Driver'
        url 'jdbc:h2:file:/tmp/daguerreo;DATABASE_TO_UPPER=false'
        user 'sa'
        password ''
      }
      generator() {
        database() {
          xml.name 'org.jooq.util.h2.H2Database'
          includes '.*'
          excludes 'schema_version'
          unsignedTypes false
          inputSchema 'PUBLIC'
        }
        generate() {
          validationAnnotations true
        }
        target() {
          packageName targetPackageName
          directory sourceSets.generated.java.srcDirs.head().path
        }
      }
    }
    org.jooq.util.GenerationTool.generate(
      javax.xml.bind.JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.util.jaxb.Configuration.class)
    )
  }
  compileGeneratedJava.dependsOn jooqGenerate
}

task jooqClean(type: Delete) {
  description = 'Remove the source code generated by jOOQ code generator.'
  group = 'jooq'
  delete "${sourceSets.generated.java.srcDirs.head().path}/${targetPackageName.replaceAll(/\./, '/')}"
  clean.dependsOn jooqClean
}

// Workaround to avoid the problem of gradle flyway plugin which occurs circular dependency.
// See: https://github.com/flyway/flyway/issues/775
afterEvaluate {
  flywayClean.dependsOn -= testClasses
  flywayInfo.dependsOn = [processResources]
  flywayMigrate.dependsOn = [processResources, processTestResources]
}
